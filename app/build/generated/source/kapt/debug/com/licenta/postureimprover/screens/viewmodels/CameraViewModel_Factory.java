// Generated by Dagger (https://dagger.dev).
package com.licenta.postureimprover.screens.viewmodels;

import androidx.camera.core.CameraSelector;
import androidx.camera.core.Preview;
import androidx.camera.lifecycle.ProcessCameraProvider;
import com.licenta.postureimprover.domain.FrameAnalyzer;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import java.util.concurrent.ExecutorService;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CameraViewModel_Factory implements Factory<CameraViewModel> {
  private final Provider<CameraSelector> selectorProvider;

  private final Provider<ProcessCameraProvider> providerProvider;

  private final Provider<Preview> previewProvider;

  private final Provider<FrameAnalyzer> analyzerProvider;

  private final Provider<ExecutorService> executorProvider;

  public CameraViewModel_Factory(Provider<CameraSelector> selectorProvider,
      Provider<ProcessCameraProvider> providerProvider, Provider<Preview> previewProvider,
      Provider<FrameAnalyzer> analyzerProvider, Provider<ExecutorService> executorProvider) {
    this.selectorProvider = selectorProvider;
    this.providerProvider = providerProvider;
    this.previewProvider = previewProvider;
    this.analyzerProvider = analyzerProvider;
    this.executorProvider = executorProvider;
  }

  @Override
  public CameraViewModel get() {
    return newInstance(selectorProvider.get(), providerProvider.get(), previewProvider.get(), analyzerProvider.get(), executorProvider.get());
  }

  public static CameraViewModel_Factory create(Provider<CameraSelector> selectorProvider,
      Provider<ProcessCameraProvider> providerProvider, Provider<Preview> previewProvider,
      Provider<FrameAnalyzer> analyzerProvider, Provider<ExecutorService> executorProvider) {
    return new CameraViewModel_Factory(selectorProvider, providerProvider, previewProvider, analyzerProvider, executorProvider);
  }

  public static CameraViewModel newInstance(CameraSelector selector, ProcessCameraProvider provider,
      Preview preview, FrameAnalyzer analyzer, ExecutorService executor) {
    return new CameraViewModel(selector, provider, preview, analyzer, executor);
  }
}
